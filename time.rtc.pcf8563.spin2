{
----------------------------------------------------------------------------------------------------
    Filename:       time.rtc.pcf8563.spin2 
    Description:    Driver for the PCF8563 Real Time Clock
    Author:         Jesse Burt
    Started:        Sep 6, 2020
    Updated:        Oct 15, 2024
    Copyright (c) 2024 - See end of file for terms of use.
----------------------------------------------------------------------------------------------------
}

#include "time.rtc.common.spin2h"               ' use code common to all RTC drivers

CON

    { default I/O settings; these can be overridden in the parent object }
    SCL             = 0
    SDA             = 1
    I2C_FREQ        = 100_000
    I2C_ADDR        = 0


    { /INT pin active state }
    WHEN_TF_ACTIVE  = 0
    INT_PULSES      = 1 << core.TI_TP

    { Operating modes }
    CLKRUN          = 0
    CLKSTOP         = 1

    SLAVE_WR        = core.SLAVE_ADDR
    SLAVE_RD        = core.SLAVE_ADDR|1
    I2C_MAX_FREQ    = core.I2C_MAX_FREQ


VAR

    byte _secs, _mins, _hours                   ' Vars to hold time
    byte _days, _wkdays, _months, _years        ' Order is important!

    byte _clkdata_ok                            ' Clock data integrity


OBJ

    i2c:    "com.i2c"                           ' I2C engine
    core:   "core.con.pcf8563.spin"             ' HW-specific constants


PUB null()
' This is not a top-level object


PUB start(): status
' Start using default I/O settings
    return startx(SCL, SDA, I2C_FREQ)


PUB startx(SCL_PIN, SDA_PIN, I2C_HZ): status
' Start the driver with custom I/O settings
'   SCL_PIN:    I2C clock, 0..63
'   SDA_PIN:    I2C data, 0..63
'   I2C_HZ:     I2C clock speed (max official specification is 400_000 but is unenforced)
'   Returns:
'       cog ID+1 of I2C engine on success
'       0 on failure
    if ( lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) )
        if ( status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ) )
            waitms(1)
            if ( i2c.present(SLAVE_WR) )        ' test device bus presence
                return status
    ' if this point is reached, something above failed
    ' Double check I/O pin assignments, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE


PUB stop()
' Stop the driver
    i2c.deinit()
    bytefill(@_secs, 0, 8)


PUB defaults()
' Factory default settings
    clkout_freq(32768)


PUB clk_data_ok(): flag
' Flag indicating battery voltage ok/clock data integrity ok
'   Returns:
'       TRUE (-1): Battery voltage ok, clock data integrity guaranteed
'       FALSE (0): Battery voltage low, clock data integrity not guaranteed
    poll_rtc()
    return ( _clkdata_ok == 0 )


PUB clkout_freq(freq=-2): c
' Set frequency of CLKOUT pin, in Hz
'   Valid values: 0, 1, 32, 1024, 32768
'   Any other value polls the chip and returns the current setting
    c := readreg(core.CTRL_CLKOUT)
    case freq
        0:                                      ' Turn off clock output
            freq := 1 << core.FE
        1, 32, 1024, 32768:
            ' map frequency to register value
            freq := lookdownz(freq: 32768, 1024, 32, 1)
        other:
            ' map register value to frequency
            if ( c & core.CLK_OUT_OFF )
                return 0
            else
                return lookupz( (c & core.FD_BITS): 32768, 1024, 32, 1)

    writereg(core.CTRL_CLKOUT, (c & core.CTRL_CLKOUT_MASK) | freq )


PUB int_clear(mask) | tmp
' Clear interrupts, using a bitmask
'   Valid values:
'       Bits: 1..0
'           1: clear alarm interrupt
'           0: clear timer interrupt
'           For each bit, 0 to leave as-is, 1 to clear
'   Any other value is ignored
    case mask
        %01, %10, %11:
            mask := (mask ^ %11) << core.TF     ' Reg bits are inverted
            tmp := (readreg(core.CTRLSTAT2) | mask) & core.CTRLSTAT2_MASK
            writereg(core.CTRLSTAT2, tmp)
        other:
            return


PUB interrupt(): f
' Flag indicating one or more interrupts asserted
    return ( (readreg(core.CTRLSTAT2) >> core.TF) & core.IF_BITS )


PUB int_mask(mask=-2): c
' Set interrupt mask
'   Valid values:
'       Bits: 1..0
'           1: enable alarm interrupt
'           0: enable timer interrupt
'   Any other value polls the chip and returns the current setting
    c := readreg(core.CTRLSTAT2)
    case mask
        %00..%11:
            writereg(core.CTRLSTAT2, (c & core.IE_MASK) | mask)
        other:
            return (c & core.IE_BITS)


PUB int_pin_state(state=-2): c
' Set interrupt pin active state
'   WHEN_TF_ACTIVE (0): /INT is active when timer interrupt asserted
'   INT_PULSES (1):     /INT pulses at rate set by timer_clk_freq()
    c := readreg(core.CTRLSTAT2)
    case state
        WHEN_TF_ACTIVE, INT_PULSES:
            writereg(core.CTRLSTAT2, (c & core.TI_TP_MASK) | state)
        other:
            return ((c >> core.TI_TP) & 1)


PUB opmode(mode=-2): c
' Set RTC internal operating mode
'   CLKRUN (0):     normal operation; RTC source clock runs
'   CLKSTOP (1):    RTC clock is stopped (32.768kHz CLKOUT still available)
    c := readreg(core.CTRLSTAT1)
    case mode
        CLKRUN, CLKSTOP:
            writereg(core.CTRLSTAT1, ( (c & core.STOP_MASK) | (mode << core.STOP) ) )
        other:
            return ((c >> core.STOP) & 1)


PUB poll_rtc()
' Read the time data from the RTC and store it in hub RAM
' Update the clock integrity status bit from the RTC
    i2c.start()
    i2c.write(SLAVE_WR)
    i2c.write(core.VL_SECS)
    i2c.start()
    i2c.write(SLAVE_RD)
    i2c.rdblock_lsbf(@_secs, 7, i2c.NAK)
    i2c.stop()

    _clkdata_ok := (_secs >> core.VL) & 1       ' Clock integrity bit
    _secs &= core.SECS_BITS
    _mins &= core.MINUTES_MASK
    _hours &= core.HOURS_MASK
    _days &= core.DAYS_MASK
    _wkdays &= core.WEEKDAYS_MASK
    _months &= core.CENTMONTHS_MASK
    _years &= core.YEARS_MASK


PUB set_date(d)
' Set date/day of month
'   Valid values: 1..31
'   Any other value is ignored
    case d
        1..31:
            writereg(core.DAYS, int2bcd(d) )
        other:
            return


PUB set_hours(h)
' Set hours
'   Valid values: 0..23
'   Any other value is ignored
    case h
        0..23:
            writereg(core.HOURS, int2bcd(h) )
        other:
            return


PUB set_minutes(m)
' Set minutes
'   Valid values: 0..59
'   Any other value is ignored
    case m
        0..59:
            writereg(core.MINUTES, int2bcd(m) )
        other:
            return


PUB set_month(m)
' Set month
'   Valid values: 1..12
'   Any other value is ignored
    case m
        1..12:
            writereg(core.CENTMONTHS, int2bcd(m) )
        other:
            return


PUB set_seconds(s)
' Set seconds
'   Valid values: 0..59
'   Any other value is ignored
    case s
        0..59:
            writereg(core.VL_SECS, int2bcd(s) )
        other:
            return


PUB set_weekday(w)
' Set day of week
'   Valid values: 1..7
'   Any other value is ignored
    case w
        1..7:
            writereg(core.WEEKDAYS, int2bcd(w-1) )
        other:
            return


PUB set_year(y)
' Set 2-digit year
'   Valid values: 0..99
'   Any other value is ignored
    case y
        0..99:
            writereg(core.YEARS, int2bcd(y) )
        other:
            return


VAR byte _timer
PUB set_timer(val): c
' Set countdown timer value
'   Valid values: 0..255 (clamped to range)
'   NOTE: The countdown period in seconds is equal to timer() / timer_clk_freq()
'       e.g., if set_timer() is set to 255, and timer_clk_freq() is set to 1,
'       the period is 255 seconds
    _timer := val := (0 #> val <# 255)
    writereg(core.TIMER, val)


PUB timer(): t
' Get currently set value of countdown timer (cached)
'   NOTE: This returns the value set by set_timer(). For the current remaining time,
'       use timer_remaining()
    return _timer


PUB timer_clk_freq(freq=-2): c
' Set timer source clock frequency, in Hz
'   Valid values:
'       1_60 (1/60Hz), 1, 64, 4096
'   Any other value polls the chip and returns the current setting
    c := readreg(core.CTRL_TIMER)
    case freq
        1_60, 1, 64, 4096:
            writereg(core.CTRL_TIMER, ((c & core.TD_MASK) | lookdownz(freq: 4096, 64, 1, 1_60) ) )
        other:
            c &= core.TD_BITS
            return lookupz(c: 4096, 64, 1, 1_60)


PUB timer_ena(state=-2): c
' Enable timer
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
    c := readreg(core.CTRL_TIMER)
    case abs(state)
        0, 1:
            state := abs(state) << core.TE
            if ( state == 0 )                   ' If disabling the timer,
                timer_clk_freq(1_60)            ' set the freq to 1/60Hz for the lowest power usage
            writereg(core.CTRL_TIMER, ((c & core.TE_MASK) | state) )
        other:
            return (((c >> core.TE) & 1) == 1)


PUB timer_remaining(): t | tmp[2]
' Get current value of countdown timer
    { NXP recommends reading the current countdown value twice and checking for consistent results
        We'll try this two times, and skip the second try if the values were good the first time }
'   Returns: current timer value, or 0 on failure
    repeat 2                                    ' up to two attempts
        t := tmp := 0
        tmp[0] := readreg(core.TIMER)
        tmp[1] := readreg(core.TIMER)
        if ( tmp[0] == tmp[1] )                 ' reads matched; return
            t := tmp[0]
            quit                                ' match; skip the second attempt
    return


PRI readreg(reg_nr): v | cmd_pkt
' Read nr_bytes from device into ptr_buff
    v := 0
    cmd_pkt.byte[0] := SLAVE_WR
    cmd_pkt.byte[1] := reg_nr
    i2c.start()                                 ' Send reg to read
    i2c.wrblock_lsbf(@cmd_pkt, 2)
    i2c.start()
    i2c.write(SLAVE_RD)
    i2c.rdblock_lsbf(@v, 1, i2c.NAK)            ' read reg into the return var
    i2c.stop()


PRI writereg(reg_nr, val) | cmd_pkt
' Write nr_bytes from ptr_buff to device
    cmd_pkt.byte[0] := SLAVE_WR
    cmd_pkt.byte[1] := reg_nr
    i2c.start()                                 ' Send reg to write
    i2c.wrblock_lsbf(@cmd_pkt, 2)
    i2c.wrblock_lsbf(@val, 1)                   ' write it
    i2c.stop()


DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

